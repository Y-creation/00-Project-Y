// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace BpmnApp.DataAccess.Ef.Models
{
    public partial class DiagramAppDBContext : DbContext
    {
        public DiagramAppDBContext()
        {
        }

        public DiagramAppDBContext(DbContextOptions<DiagramAppDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AppUser> AppUser { get; set; }
        public virtual DbSet<Diagram> Diagram { get; set; }
        public virtual DbSet<SubProcessDiagram> SubProcessDiagram { get; set; }
        public virtual DbSet<UserDiagram> UserDiagram { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source=SQL8004.site4now.net;Initial Catalog=db_a92e7a_bpmnapp;User Id=db_a92e7a_bpmnapp_admin;Password=12345678Denis");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AppUser>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK__AppUser__1788CC4CB0A85F8E");

                entity.Property(e => e.UserId).ValueGeneratedNever();

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UserLoginName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UserNme)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Diagram>(entity =>
            {
                entity.Property(e => e.DiagramId).ValueGeneratedNever();

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DiagramProcessName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.DiagramXml).IsRequired();

                entity.HasOne(d => d.UserCreator)
                    .WithMany(p => p.Diagram)
                    .HasForeignKey(d => d.UserCreatorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Diagram__UserCre__267ABA7A");
            });

            modelBuilder.Entity<SubProcessDiagram>(entity =>
            {
                entity.Property(e => e.SubProcessDiagramId).ValueGeneratedNever();

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DiagramXml).IsRequired();

                entity.Property(e => e.ParentElementName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.ParentDiagram)
                    .WithMany(p => p.SubProcessDiagram)
                    .HasForeignKey(d => d.ParentDiagramId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__SubProces__Paren__2A4B4B5E");

                entity.HasOne(d => d.UserCreator)
                    .WithMany(p => p.SubProcessDiagram)
                    .HasForeignKey(d => d.UserCreatorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__SubProces__UserC__29572725");
            });

            modelBuilder.Entity<UserDiagram>(entity =>
            {
                entity.Property(e => e.UserDiagramId).ValueGeneratedNever();

                entity.HasOne(d => d.Diagram)
                    .WithMany(p => p.UserDiagram)
                    .HasForeignKey(d => d.DiagramId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__UserDiagr__Diagr__2E1BDC42");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserDiagram)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__UserDiagr__UserI__2D27B809");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}